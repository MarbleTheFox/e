buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url = 'https://repo.spongepowered.org/maven'}
        maven {
            url "https://repo.spongepowered.org/repository/maven-public/"
            content { includeGroup "org.spongepowered" }
        }
        mavenCentral()
    }

    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '6.0.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'

    }
}

plugins {
    id 'eclipse'
    id 'maven-publish'
    //id 'org.parchmentmc.librarian.forgegradle'
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'

base {
    archivesName = mod_id
    group = mod_group_id
    version = mod_version
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
    mappings channel: mapping_channel, version: mapping_version

    runs {
        configureEach {

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "$projectDir/build/createSrgToMcp/output.srg"

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            arg "-mixin.config=terrafirmamisc.mixins.json"
        }

        client {
            workingDirectory project.file('run')
        }

        server {
            workingDirectory project.file('run')
            arg("--nogui")
        }

        data {
            args '--mod', 'terrafirmamisc', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

repositories {
    maven {
        // tfc
        url 'https://www.cursemaven.com'
        content {
            includeGroup "curse.maven"
        }
    }

    maven {
        // Patchouli
        name = "BlameJared"
        url = "https://maven.blamejared.com"
    }
}

dependencies {

    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    annotationProcessor("org.spongepowered:mixin:0.8.5:processor")

    // tfc
    //fg.deobf("curse.maven:terrafirmacraft-302973:4976574")
    implementation fg.deobf("curse.maven:terrafirmacraft-302973:5571484")

    // patchouli
    fg.deobf("curse.maven:patchouli-306770:4966125")
    implementation fg.deobf("curse.maven:patchouli-306770:4966125")

    // jei
    fg.deobf("curse.maven:jei-238222:5626488")
    runtimeOnly fg.deobf("curse.maven:jei-238222:5626488")

    // firmalife
    fg.deobf("curse.maven:firmalife-453394:5651628")
    runtimeOnly fg.deobf("curse.maven:firmalife-453394:5651628")

}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }


tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version       : forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors         : mod_authors, mod_description: mod_description,
    ]

    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
}

// Example for how to get properties into the manifest for reading at runtime.
tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                "Specification-Title"     : mod_id,
                "Specification-Vendor"    : mod_authors,
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    // This is the preferred method to reobfuscate your jar file
    finalizedBy 'reobfJar'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}